{ lib, config, ... }@args:
let
  inherit (lib) types mkOption mkEnableOption;

  cfg = config;
in
{
  options = {
    hostname = mkOption {
      type = types.str;
      readOnly = true;
      # use the directory name under `hosts` of current machine as hostname
      default = args.hostname;
    };

    architecture = mkOption {
      type = types.enum [
        "x86_64-linux"
        "aarch64-linux"
      ];
      default = "x86_64-linux";
    };

    stateVersion = mkOption {
      type = types.str;
      readOnly = true;
      default = (import ../../nixosVersion.nix);
    };

    tags = mkOption {
      type = types.listOf types.str;
      default = [ ];
    };

    kits = {
      hasTag = mkOption {
        readOnly = true;
        default = tag: builtins.elem tag cfg.tags;
      };

      isDesktopEnabled = mkOption {
        type = types.bool;
        readOnly = true;
        default = (cfg.desktop != null);
      };
    };

    boot = {
      secureboot = {
        pathPkiBundle = mkOption {
          type = types.str;
          description = lib.literalExpression ''
            The path of pki bundle generated by sbctl;
          '';
          default = "/etc/secureboot";
        };
      };

      bootRollbackConfigurationsLimit = mkOption {
        type = types.int;
        default = 20;
      };
    };

    desktop = mkOption {
      type = types.enum [
        "gnome"
        "cosmic"
        "kde"
        null
      ];
      default = null;
    };

    i18n = {
      timeZone = mkOption {
        type = types.str;
        default = "Asia/Taipei";
      };
      defaultLocale = mkOption {
        type = types.str;
        default = "en_US.UTF-8";
      };
      supportedLocales = mkOption {
        type = types.listOf types.str;
        default = [ "en_US.UTF-8/UTF-8" ];
      };
    };

    sound = {
      enable = mkEnableOption "sound" // {
        # enable sound function when GUI desktop is enabled
        default = cfg.kits.isDesktopEnabled;
      };
      preferBackend = mkOption {
        type = types.enum [ "pipewire" ];
        default = "pipewire";
      };

      pipewire = {
        enableAlsa = mkEnableOption "pipewire support for alsa" // {
          default = true;
        };
        enableAlsa32BitSupport = mkEnableOption "pipewire support for alsa 32bit" // {
          # enable alsa 32bit defaultly
          default = true;
        };
        enablePulseaudio = mkEnableOption "pipewire support for pulseaudio" // {
          default = true;
        };
        enableJack = mkEnableOption "pipewire support for jack" // { };
      };
    };

    users = mkOption {
      type = types.listOf types.str;
      description = "Users which specified to import from home-manager.";
      default = [ ];
    };

    allowUnfreePackages = mkEnableOption "unfree packages from nixpkgs" // {
      default = true;
    };

    efiSysMountPoint = mkOption {
      type = types.nullOr types.str;
      default = null;
    };

    grubDevice = mkOption {
      type = types.str;
      default = "nodev";
    };

    isEFI = mkOption {
      type = types.bool;
      readOnly = true;
      default = (cfg.efiSysMountPoint != null);
    };

    bootloader = mkOption {
      type = types.str;
      default = if (cfg.efiSysMountPoint != null) then "systemd-boot" else "grub";
    };
  };

  options.powerManagement = {
    hibernate = {
      enable = mkEnableOption "automatical hibernate" // {
        # Only support Gnome Desktop
        # because KDE or other desktops have hibernation function
        default = if (cfg.desktop == "gnome") then true else false;
      };
      afterSeconds = mkOption {
        type = types.str;
        description = "Automatically hibernate after how many seconds countdown, defaultly it is 3 hours.";
        default = "10800";
      };
    };
  };

  options.components = {
    waydroid.enable = mkEnableOption "waydroid component";
    flatpak.enable = mkEnableOption "flatpak component";
    kvm = {
      enable = mkEnableOption "KVM component";
      allowUsers = mkOption {
        type = types.listOf types.str;
        description = lib.literalExpression ''
          Users who allowed to manage kvm.
        '';
        default = [ ];
      };
    };
    docker = {
      enable = mkEnableOption "docker component";
      allowUsers = mkOption {
        type = types.listOf types.str;
        description = lib.literalExpression ''
          Users who will be imported by home-manager,
          so make true that user dirs are created in root/user/
        '';
        example = [
          "username1"
          "username2"
        ];
        default = [ ];
      };
    };
  };
}
